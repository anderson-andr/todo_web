{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/usuario.service\";\nexport class UsuarioResolver {\n  constructor(service) {\n    this.service = service;\n  }\n  resolve(route, state) {\n    if (route.params && route.params['id']) {\n      return this.service.loadById(route.params['id']);\n    }\n    return of({\n      id: 0,\n      name: '',\n      email: '',\n      password: ''\n    });\n  }\n}\nUsuarioResolver.ɵfac = function UsuarioResolver_Factory(t) {\n  return new (t || UsuarioResolver)(i0.ɵɵinject(i1.UsuarioService));\n};\nUsuarioResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioResolver,\n  factory: UsuarioResolver.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAAqBA,EAAE,QAAQ,MAAM;;;AAQrC,OAAM,MAAOC,eAAe;EAC1BC,YAAqBC,OAAuB;IAAvB,YAAO,GAAPA,OAAO;EAAmB;EAC/CC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAC/D,IAAGD,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACE,MAAM,CAAC,IAAI,CAAC,EAAE;MACrC,OAAO,IAAI,CAACJ,OAAO,CAACK,QAAQ,CAACH,KAAK,CAACE,MAAM,CAAC,IAAI,CAAC,CAAC;;IAElD,OAAOP,EAAE,CAAE;MAAES,EAAE,EAAC,CAAC;MAAEC,IAAI,EAAC,EAAE;MAAEC,KAAK,EAAC,EAAE;MAACC,QAAQ,EAAC;IAAE,CAAC,CAAC;EACpD;;AAPWX,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;EAAAa,YAFd;AAAM","names":["of","UsuarioResolver","constructor","service","resolve","route","state","params","loadById","id","name","email","password","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\usuario\\guards\\usuario.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\nimport { UsuarioService } from '../services/usuario.service';\nimport { Usuario } from '../model/usuario';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioResolver implements Resolve<Usuario> {\n  constructor (private service: UsuarioService) {}\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Usuario> {\n    if(route.params && route.params['id']) {\n      return this.service.loadById(route.params['id']);\n    }\n    return of ({ id:0, name:'', email:'',password:''});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}