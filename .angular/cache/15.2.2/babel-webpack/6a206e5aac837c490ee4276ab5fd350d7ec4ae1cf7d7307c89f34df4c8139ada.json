{"ast":null,"code":"import { first, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"auth.service\";\nexport class TaskService {\n  constructor(httpClient, authservice) {\n    this.httpClient = httpClient;\n    this.authservice = authservice;\n    this.API = 'http://localhost:3000/api/Task';\n  }\n  list() {\n    return this.httpClient.get(this.API).pipe(first(), tap(Task => {\n      console.log(Task);\n    }));\n  }\n  listByProject() {\n    return this.httpClient.get(this.API + '/project/' + window.localStorage.getItem('projeto')).pipe(first(), tap(Task => {\n      console.log(Task);\n    }));\n  }\n  save(record) {\n    console.log(record);\n    if (record.id) {\n      console.log('update');\n      return this.update(record);\n    }\n    console.log('create');\n    return this.create(record);\n  }\n  create(record) {\n    return this.httpClient.post(this.API, record).pipe(first());\n  }\n  update(record) {\n    return this.httpClient.put(`${this.API}/${record.id}`, record).pipe(first());\n  }\n  loadById(id) {\n    return this.httpClient.get(`${this.API}/${id}`);\n  }\n  delete(Task) {\n    return this.httpClient.delete(this.API + '/' + Task.id);\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,KAAK,EAAoBC,GAAG,QAAQ,MAAM;;;;AAMnD,OAAM,MAAOC,WAAW;EAGtBC,YACUC,UAAsB,EACtBC,WAAwB;IADxB,eAAU,GAAVD,UAAU;IACV,gBAAW,GAAXC,WAAW;IAHJ,QAAG,GAAG,gCAAgC;EAInD;EAEJC,IAAI;IACF,OAAO,IAAI,CAACF,UAAU,CACnBG,GAAG,CAAS,IAAI,CAACC,GAAG,CAAE,CACtBC,IAAI,CACHT,KAAK,EAAE,EACPC,GAAG,CAAES,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,CAAC,CACH;EACL;EACAG,aAAa;IACX,OAAO,IAAI,CAACT,UAAU,CACnBG,GAAG,CAAS,IAAI,CAACC,GAAG,GAAG,WAAW,GAAGM,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAE,CAC7EP,IAAI,CACHT,KAAK,EAAE,EACPC,GAAG,CAAES,IAAI,IAAI;MACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,CAAC,CACH;EACL;EACAO,IAAI,CAACC,MAAqB;IACxBP,OAAO,CAACC,GAAG,CAACM,MAAM,CAAC;IACnB,IAAIA,MAAM,CAACC,EAAE,EAAE;MACbR,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB,OAAO,IAAI,CAACQ,MAAM,CAACF,MAAM,CAAC;;IAE5BP,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO,IAAI,CAACS,MAAM,CAACH,MAAM,CAAC;EAC5B;EACQG,MAAM,CAACH,MAAqB;IAClC,OAAO,IAAI,CAACd,UAAU,CAACkB,IAAI,CAAO,IAAI,CAACd,GAAG,EAAEU,MAAM,CAAC,CAACT,IAAI,CAACT,KAAK,EAAE,CAAC;EACnE;EACQoB,MAAM,CAACF,MAAqB;IAClC,OAAO,IAAI,CAACd,UAAU,CACnBmB,GAAG,CAAO,GAAG,IAAI,CAACf,GAAG,IAAIU,MAAM,CAACC,EAAE,EAAE,EAAED,MAAM,CAAC,CAC7CT,IAAI,CAACT,KAAK,EAAE,CAAC;EAClB;EAEAwB,QAAQ,CAACL,EAAU;IACjB,OAAO,IAAI,CAACf,UAAU,CAACG,GAAG,CAAO,GAAG,IAAI,CAACC,GAAG,IAAIW,EAAE,EAAE,CAAC;EAEvD;EAEAM,MAAM,CAACf,IAAU;IACf,OAAO,IAAI,CAACN,UAAU,CAACqB,MAAM,CAAO,IAAI,CAACjB,GAAG,GAAG,GAAG,GAAGE,IAAI,CAACS,EAAE,CAAC;EAC/D;;AArDWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["first","tap","TaskService","constructor","httpClient","authservice","list","get","API","pipe","Task","console","log","listByProject","window","localStorage","getItem","save","record","id","update","create","post","put","loadById","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\task\\services\\task.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from 'auth.service';\nimport { first, Observable, take, tap } from 'rxjs';\nimport { Task } from '../model/task';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  private readonly API = 'http://localhost:3000/api/Task';\n  constructor(\n    private httpClient: HttpClient,\n    private authservice: AuthService\n  ) { }\n\n  list() {\n    return this.httpClient\n      .get<Task[]>(this.API )\n      .pipe(\n        first(),\n        tap((Task) => {\n          console.log(Task);\n        })\n      );\n  }\n  listByProject() {\n    return this.httpClient\n      .get<Task[]>(this.API + '/project/' + window.localStorage.getItem('projeto') )\n      .pipe(\n        first(),\n        tap((Task) => {\n          console.log(Task);\n        })\n      );\n  }\n  save(record: Partial<Task>) {\n    console.log(record);\n    if (record.id) {\n      console.log('update');\n      return this.update(record);\n    }\n    console.log('create');\n    return this.create(record);\n  }\n  private create(record: Partial<Task>) {\n    return this.httpClient.post<Task>(this.API, record).pipe(first());\n  }\n  private update(record: Partial<Task>) {\n    return this.httpClient\n      .put<Task>(`${this.API}/${record.id}`, record)\n      .pipe(first());\n  }\n\n  loadById(id: string) {\n    return this.httpClient.get<Task>(`${this.API}/${id}`);\n\n  }\n\n  delete(Task: Task) {\n    return this.httpClient.delete<Task>(this.API + '/' + Task.id);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}