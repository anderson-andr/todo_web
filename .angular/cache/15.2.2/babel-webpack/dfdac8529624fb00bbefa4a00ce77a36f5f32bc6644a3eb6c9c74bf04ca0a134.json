{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./src/app/api-service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(apiService, router) {\n    this.apiService = apiService;\n    this.router = router;\n    this._isLoggedIn$ = new BehaviorSubject(false);\n    this.TOKEN_NAME = 'x-auth-token';\n    this.isLoggedIn$ = this._isLoggedIn$.asObservable();\n    const token = localStorage.getItem(this.TOKEN_NAME);\n    const user = localStorage.getItem('User');\n    this._isLoggedIn$.next(!!token);\n    console.log(token);\n  }\n  get token() {\n    return JSON.parse(JSON.stringify(localStorage.getItem(this.TOKEN_NAME)));\n  }\n  get Usuario() {\n    return JSON.parse(JSON.stringify(localStorage.getItem('Usuario')));\n  }\n  login(email, password) {\n    return this.apiService.login(email, password).pipe(tap(response => {\n      console.log(response);\n      this._isLoggedIn$.next(true);\n      let token = JSON.parse(JSON.stringify(response)).token.split(' ')[0];\n      console.log(token);\n      let user = json;\n      window.localStorage.setItem(this.TOKEN_NAME, token);\n      window.localStorage.setItem('Usuario', user);\n      console.log(window.localStorage.getItem(this.TOKEN_NAME));\n    }));\n  }\n  deslogar() {\n    localStorage.removeItem(this.TOKEN_NAME);\n    this.router.navigate(['login']);\n  }\n  getAuthorizationToken() {\n    const token = window.localStorage.getItem(this.TOKEN_NAME);\n    return token;\n  }\n  getTokenExpirationDate(token) {\n    const decoded = jwt_decode(token);\n    if (decoded.exp == undefined) {\n      return decoded;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n    return date;\n  }\n  isTokenExpired(token) {\n    if (!token) {\n      return true;\n    }\n    const date = this.getTokenExpirationDate(token);\n    if (date === undefined) {\n      return false;\n    }\n    return !(date.valueOf() > new Date().valueOf());\n  }\n  isUserLoggedIn() {\n    const token = this.getAuthorizationToken();\n    if (!token) {\n      return false;\n    } else if (this.isTokenExpired(token)) {\n      return false;\n    }\n    return true;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","tap","jwt_decode","AuthService","constructor","apiService","router","_isLoggedIn$","asObservable","token","localStorage","getItem","TOKEN_NAME","user","next","console","log","JSON","parse","stringify","Usuario","login","email","password","pipe","response","split","json","window","setItem","deslogar","removeItem","navigate","getAuthorizationToken","getTokenExpirationDate","decoded","exp","undefined","date","Date","setUTCSeconds","isTokenExpired","valueOf","isUserLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ApiService } from './src/app/api-service';\nimport jwt_decode from 'jwt-decode';\nimport { Router } from '@angular/router';\nimport { User } from './src/app/login/model/login';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class AuthService {\n  private _isLoggedIn$ = new BehaviorSubject<boolean>(false);\n  public readonly TOKEN_NAME = 'x-auth-token'\n  isLoggedIn$ = this._isLoggedIn$.asObservable();\n\n\n  constructor(private apiService: ApiService,\n    private router: Router ) {\n    const token = localStorage.getItem(this.TOKEN_NAME);\n    const user =  localStorage.getItem('User')\n    this._isLoggedIn$.next(!!token);\n    console.log(token);\n\n  }\n  get token(){\n     return JSON.parse((JSON.stringify(localStorage.getItem(this.TOKEN_NAME))));\n\n\n\n  }\n\n  get Usuario () {\n    return JSON.parse((JSON.stringify(localStorage.getItem('Usuario'))));\n\n\n  }\n\n\n  login(email: string, password: string) {\n    return this.apiService.login(email, password).pipe(\n      tap((response) => {\n        console.log(response)\n        this._isLoggedIn$.next(true);\n        let token = JSON.parse(JSON.stringify(response)).token.split(' ')[0];\n        console.log(token)\n        let user =json\n        window.localStorage.setItem(this.TOKEN_NAME, token)\n        window.localStorage.setItem('Usuario',user)\n        console.log( window.localStorage.getItem(this.TOKEN_NAME))\n\n\n\n\n\n      })\n    );\n  }\n  deslogar() {\n    localStorage.removeItem(this.TOKEN_NAME);\n    this.router.navigate(['login']);\n}\n  getAuthorizationToken() {\n    const token = window.localStorage.getItem(this.TOKEN_NAME);\n    return token\n\n  }\n\n  getTokenExpirationDate(token: any) :Date{\n\n    const decoded: any = jwt_decode(token);\n\n    if (decoded.exp == undefined) {\n      return  decoded;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n    return date;\n  }\n\n\n  isTokenExpired(token?: string): boolean {\n    if (!token) {\n      return true;\n    }\n\n    const date = this.getTokenExpirationDate(token);\n    if (date === undefined) {\n      return false;\n    }\n\n    return !(date.valueOf() > new Date().valueOf());\n  }\n\n  isUserLoggedIn() {\n    const token = this.getAuthorizationToken();\n    if (!token) {\n      return false;\n    } else if (this.isTokenExpired(token)) {\n      return false;\n    }\n    return true;\n\n  }\n\n\n\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}