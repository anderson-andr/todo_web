{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getAuthorizationToken();\n    let request = req;\n    if (token && !this.authService.isTokenExpired(token)) {\n      // O request é imutavel, ou seja, não é possível mudar nada\n      // Faço o clone para conseguir mudar as propriedades\n      // Passo o token de autenticação no header\n      request = req.clone({\n        headers: req.headers.set('x-auth-token', `${token}`)\n      });\n    }\n    // retorno o request com o erro tratado\n    return next.handle(request).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      // Erro de client-side ou de rede\n      console.error('Ocorreu um erro:', error.error.message);\n    } else {\n      // Erro retornando pelo backend\n      console.error(`Código do erro ${error.status}, ` + `Erro: ${JSON.stringify(error.error)}`);\n    }\n    // retornar um observable com uma mensagem amigavel.\n    return throwError('Ocorreu um erro, tente novamente');\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport const AuthInterceptProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  mult: true\n};","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAqE,sBAAsB;AAErH,SAASC,UAAU,QAAQ,MAAM;AACjC,SAASC,UAAU,QAAQ,gBAAgB;;;AAS3C,OAAM,MAAOC,eAAe;EAE1BC,YAAqBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAE7B;EAGHC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAEhD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,qBAAqB,EAAE;IACtD,IAAIC,OAAO,GAAqBJ,GAAG;IAEnC,IAAIE,KAAK,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACO,cAAc,CAACH,KAAK,CAAC,EAAE;MACpD;MACA;MACA;MACAE,OAAO,GAAGJ,GAAG,CAACM,KAAK,CAAC;QAClBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,GAAGN,KAAK,EAAE;OACpD,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACQ,MAAM,CAACL,OAAO,CAAC,CACxBM,IAAI,CACHf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACrC;MACAC,OAAO,CAACF,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC;KACvD,MAAM;MACL;MACAD,OAAO,CAACF,KAAK,CACX,kBAAkBA,KAAK,CAACI,MAAM,IAAI,GAClC,SAASC,IAAI,CAACC,SAAS,CAACN,KAAK,CAACA,KAAK,CAAC,EAAE,CAAC;;IAE3C;IACA,OAAOlB,UAAU,CAAC,kCAAkC,CAAC;EACvD;;AAxCWE,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAuB,SAAfvB,eAAe;AAAA;AA6C5B,OAAO,MAAOwB,qBAAqB,GAAG;EACpCC,OAAO,EAAE5B,iBAAiB;EAC1B6B,QAAQ,EAAC1B,eAAe;EACxB2B,IAAI,EAAC;CACN","names":["HTTP_INTERCEPTORS","throwError","catchError","AuthInterceptor","constructor","authService","intercept","req","next","token","getAuthorizationToken","request","isTokenExpired","clone","headers","set","handle","pipe","handleError","error","ErrorEvent","console","message","status","JSON","stringify","factory","AuthInterceptProvider","provide","useClass","mult"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\auth-interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpHandler, HttpInterceptor, HttpRequest ,HttpErrorResponse} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../../auth.service';\r\n\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor( private authService:AuthService\r\n\r\n  ) {}\r\n\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\r\n    const token = this.authService.getAuthorizationToken();\r\n    let request: HttpRequest<any> = req;\r\n\r\n    if (token && !this.authService.isTokenExpired(token)) {\r\n      // O request é imutavel, ou seja, não é possível mudar nada\r\n      // Faço o clone para conseguir mudar as propriedades\r\n      // Passo o token de autenticação no header\r\n      request = req.clone({\r\n        headers: req.headers.set('x-auth-token', `${token}`)\r\n      });\r\n    }\r\n\r\n    // retorno o request com o erro tratado\r\n    return next.handle(request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Erro de client-side ou de rede\r\n      console.error('Ocorreu um erro:', error.error.message);\r\n    } else {\r\n      // Erro retornando pelo backend\r\n      console.error(\r\n        `Código do erro ${error.status}, ` +\r\n        `Erro: ${JSON.stringify(error.error)}`);\r\n    }\r\n    // retornar um observable com uma mensagem amigavel.\r\n    return throwError('Ocorreu um erro, tente novamente');\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const  AuthInterceptProvider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass:AuthInterceptor,\r\n  mult:true,\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}