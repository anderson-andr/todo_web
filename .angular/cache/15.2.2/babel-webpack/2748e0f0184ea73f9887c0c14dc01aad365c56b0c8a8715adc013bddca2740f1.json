{"ast":null,"code":"import { first, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../../auth.service\";\nexport class ProjectService {\n  constructor(httpClient, authservice) {\n    this.httpClient = httpClient;\n    this.authservice = authservice;\n    this.API = 'http://localhost:3000/api/project';\n  }\n  list() {\n    return this.httpClient.get(this.API).pipe(first(), tap(Project => {\n      console.log(Project);\n    }));\n  }\n  listByUser() {\n    return this.httpClient.get(this.API + '/user/' + this.authservice.Usuario).pipe(first(), tap(Project => {\n      console.log(Project);\n    }));\n  }\n  save(record) {\n    console.log(record);\n    if (record.id) {\n      console.log('update');\n      return this.update(record);\n    }\n    console.log('create');\n    return this.create(record);\n  }\n  create(record) {\n    return this.httpClient.post(this.API, record).pipe(first());\n  }\n  update(record) {\n    return this.httpClient.put(`${this.API}/${record.id}`, record).pipe(first());\n  }\n  loadById(id) {\n    return this.httpClient.get(`${this.API}/${id}`);\n  }\n  delete(Project) {\n    return this.httpClient.delete(this.API + '/' + Project.id);\n  }\n}\nProjectService.ɵfac = function ProjectService_Factory(t) {\n  return new (t || ProjectService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectService,\n  factory: ProjectService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,EAAoBC,GAAG,QAAQ,MAAM;;;;AAMnD,OAAM,MAAOC,cAAc;EAEzBC,YACUC,UAAsB,EACtBC,WAAwB;IADxB,eAAU,GAAVD,UAAU;IACV,gBAAW,GAAXC,WAAW;IAHJ,QAAG,GAAG,mCAAmC;EAItD;EAEJC,IAAI;IACF,OAAO,IAAI,CAACF,UAAU,CACnBG,GAAG,CAAY,IAAI,CAACC,GAAG,CAAE,CACzBC,IAAI,CACHT,KAAK,EAAE,EACPC,GAAG,CAAES,OAAO,IAAI;MACdC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,CAAC,CAAC,CACH;EACL;EACAG,UAAU;IACR,OAAO,IAAI,CAACT,UAAU,CACnBG,GAAG,CAAY,IAAI,CAACC,GAAG,GAAG,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACS,OAAO,CAAC,CAC9DL,IAAI,CACHT,KAAK,EAAE,EACPC,GAAG,CAAES,OAAO,IAAI;MACdC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,CAAC,CAAC,CACH;EACL;EACAK,IAAI,CAACC,MAAwB;IAC3BL,OAAO,CAACC,GAAG,CAACI,MAAM,CAAC;IACnB,IAAIA,MAAM,CAACC,EAAE,EAAE;MACbN,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB,OAAO,IAAI,CAACM,MAAM,CAACF,MAAM,CAAC;;IAE5BL,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO,IAAI,CAACO,MAAM,CAACH,MAAM,CAAC;EAC5B;EACQG,MAAM,CAACH,MAAwB;IACrC,OAAO,IAAI,CAACZ,UAAU,CAACgB,IAAI,CAAU,IAAI,CAACZ,GAAG,EAAEQ,MAAM,CAAC,CAACP,IAAI,CAACT,KAAK,EAAE,CAAC;EACtE;EACQkB,MAAM,CAACF,MAAwB;IACrC,OAAO,IAAI,CAACZ,UAAU,CACnBiB,GAAG,CAAU,GAAG,IAAI,CAACb,GAAG,IAAIQ,MAAM,CAACC,EAAE,EAAE,EAAED,MAAM,CAAC,CAChDP,IAAI,CAACT,KAAK,EAAE,CAAC;EAClB;EAEAsB,QAAQ,CAACL,EAAU;IACjB,OAAO,IAAI,CAACb,UAAU,CAACG,GAAG,CAAU,GAAG,IAAI,CAACC,GAAG,IAAIS,EAAE,EAAE,CAAC;EAE1D;EAEAM,MAAM,CAACb,OAAgB;IACrB,OAAO,IAAI,CAACN,UAAU,CAACmB,MAAM,CAAU,IAAI,CAACf,GAAG,GAAG,GAAG,GAAGE,OAAO,CAACO,EAAE,CAAC;EACrE;;AApDWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["first","tap","ProjectService","constructor","httpClient","authservice","list","get","API","pipe","Project","console","log","listByUser","Usuario","save","record","id","update","create","post","put","loadById","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\project\\services\\project.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from '../../../../auth.service';\nimport { first, Observable, take, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Project } from '../model/project';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  private readonly API = 'http://localhost:3000/api/project';\n  constructor(\n    private httpClient: HttpClient,\n    private authservice: AuthService\n  ) { }\n\n  list() {\n    return this.httpClient\n      .get<Project[]>(this.API )\n      .pipe(\n        first(),\n        tap((Project) => {\n          console.log(Project);\n        })\n      );\n  }\n  listByUser() {\n    return this.httpClient\n      .get<Project[]>(this.API + '/user/' + this.authservice.Usuario)\n      .pipe(\n        first(),\n        tap((Project) => {\n          console.log(Project);\n        })\n      );\n  }\n  save(record: Partial<Project>) {\n    console.log(record);\n    if (record.id) {\n      console.log('update');\n      return this.update(record);\n    }\n    console.log('create');\n    return this.create(record);\n  }\n  private create(record: Partial<Project>) {\n    return this.httpClient.post<Project>(this.API, record).pipe(first());\n  }\n  private update(record: Partial<Project>) {\n    return this.httpClient\n      .put<Project>(`${this.API}/${record.id}`, record)\n      .pipe(first());\n  }\n\n  loadById(id: string) {\n    return this.httpClient.get<Project>(`${this.API}/${id}`);\n\n  }\n\n  delete(Project: Project) {\n    return this.httpClient.delete<Project>(this.API + '/' + Project.id);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}