{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError, of } from 'rxjs';\nimport { ErrorDialogComponent } from 'src/app/shared/components/error-dialog/error-dialog.component';\nlet TaskComponent = class TaskComponent {\n  constructor(taskService, router, route, dialog) {\n    this.taskService = taskService;\n    this.router = router;\n    this.route = route;\n    this.dialog = dialog;\n    this.displayedColumns = ['name', 'description', 'notes', 'completed', 'deadline', 'vencido', 'updatedAt', 'createdAt', 'actions'];\n    this.tasks = [];\n    {\n      this.task$ = this.taskService.listByProject().pipe(catchError(error => {\n        this.onErro('Erro ao carregar. ');\n        return of([]);\n      }));\n    }\n  }\n  ngOnInit() {}\n  onErro(errorMsg) {\n    this.dialog.open(ErrorDialogComponent, {\n      data: errorMsg\n    });\n  }\n  onEdit(task) {\n    this.router.navigate(['editar', task.id], {\n      relativeTo: this.route\n    });\n  }\n  Add() {\n    this.router.navigate(['novo'], {\n      relativeTo: this.route\n    });\n  }\n  refresh() {\n    this.task$ = this.taskService.list().pipe(catchError(error => {\n      this.onErro('Erro ao carregar Tarefas.');\n      return of([]);\n    }));\n  }\n  onDelete(task) {\n    this.taskService.delete(task).subscribe(data => {\n      this.tasks = this.tasks.filter(response => response !== task);\n      alert(\"task Deletado\");\n      this.refresh();\n    });\n  }\n  isPrazoEsgotado(prazo) {\n    const dataAtual = new Date();\n    return dataAtual >= prazo;\n  }\n};\nTaskComponent = __decorate([Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})], TaskComponent);\nexport { TaskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,UAAU,EAAcC,EAAE,QAAQ,MAAM;AACjD,SAASC,oBAAoB,QAAQ,+DAA+D;AAS7F,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAKxBC,YACUC,WAAwB,EACxBC,MAAa,EACbC,KAAqB,EACtBC,MAAiB;IAHhB,gBAAW,GAAXH,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACN,WAAM,GAANC,MAAM;IAPf,qBAAgB,GAAG,CAAC,MAAM,EAAE,aAAa,EAAC,OAAO,EAAC,WAAW,EAAC,UAAU,EAAC,SAAS,EAAC,WAAW,EAAC,WAAW,EAAC,SAAS,CAAC;IACrH,UAAK,GAAW,EAAE;IAQhB;MACE,IAAI,CAACC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,aAAa,EAAE,CAACC,IAAI,CAEhDX,UAAU,CAAEY,KAAK,IAAG;QACjB,IAAI,CAACC,MAAM,CAAC,oBAAoB,CAAC;QAChC,OAAQZ,EAAE,CAAC,EAAE,CAAC;MAClB,CAAC,CAAC,CACH;;EAML;EACAa,QAAQ,IAGR;EAEAD,MAAM,CAACE,QAAgB;IACrB,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACd,oBAAoB,EAAE;MACrCe,IAAI,EAAEF;KACP,CAAC;EACJ;EAGAG,MAAM,CAACC,IAAS;IACd,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,EAAED,IAAI,CAACE,EAAE,CAAC,EAAE;MAACC,UAAU,EAAC,IAAI,CAACf;IAAK,CAAC,CAAC;EACpE;EAEAgB,GAAG;IACD,IAAI,CAACjB,MAAM,CAACc,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;MAACE,UAAU,EAAC,IAAI,CAACf;IAAK,CAAC,CAAC;EACzD;EAIAiB,OAAO;IACL,IAAI,CAACf,KAAK,GAAE,IAAI,CAACJ,WAAW,CAACoB,IAAI,EAAE,CAChCd,IAAI,CACHX,UAAU,CAACY,KAAK,IAAG;MACjB,IAAI,CAACC,MAAM,CAAC,2BAA2B,CAAC;MACxC,OAAOZ,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACL;EAEAyB,QAAQ,CAACP,IAAU;IACf,IAAI,CAACd,WAAW,CAACsB,MAAM,CAACR,IAAI,CAAC,CAACS,SAAS,CAACX,IAAI,IAAG;MAC7C,IAAI,CAACY,KAAK,GAAG,IAAI,CAACA,KAAK,CAACC,MAAM,CAAEC,QAAQ,IAAIA,QAAQ,KAAIZ,IAAI,CAAC;MAC7Da,KAAK,CAAC,eAAe,CAAC;MACtB,IAAI,CAACR,OAAO,EAAE;IAChB,CAAC,CAAC;EACN;EAEAS,eAAe,CAACC,KAAW;IACzB,MAAMC,SAAS,GAAG,IAAIC,IAAI,EAAE;IAC5B,OAAOD,SAAS,IAAID,KAAK;EAC3B;CAED;AAtEY/B,aAAa,eALzBJ,SAAS,CAAC;EACTsC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpC,aAAa,CAsEzB;SAtEYA,aAAa","names":["Component","catchError","of","ErrorDialogComponent","TaskComponent","constructor","taskService","router","route","dialog","task$","listByProject","pipe","error","onErro","ngOnInit","errorMsg","open","data","onEdit","task","navigate","id","relativeTo","Add","refresh","list","onDelete","delete","subscribe","tasks","filter","response","alert","isPrazoEsgotado","prazo","dataAtual","Date","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\task\\task\\task.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { catchError, Observable, of } from 'rxjs';\nimport { ErrorDialogComponent } from 'src/app/shared/components/error-dialog/error-dialog.component';\nimport { Task } from '../model/task';\nimport { TaskService } from '../services/task.service';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n  task$: Observable<Task[]>\n  displayedColumns = ['name', 'description','notes','completed','deadline','vencido','updatedAt','createdAt','actions'];\n  tasks: Task[] = []\n\n  constructor(\n    private taskService: TaskService,\n    private router:Router,\n    private route: ActivatedRoute,\n    public dialog: MatDialog,)\n  {\n    {\n      this.task$ = this.taskService.listByProject().pipe (\n\n        catchError (error => {\n           this.onErro('Erro ao carregar. ')\n            return  of([])\n        })\n      );\n    }\n\n\n\n\n  }\n  ngOnInit(): void {\n\n\n  }\n\n  onErro(errorMsg: string) {\n    this.dialog.open(ErrorDialogComponent, {\n      data: errorMsg,\n    });\n  }\n\n\n  onEdit(task:Task) {\n    this.router.navigate(['editar', task.id], {relativeTo:this.route});\n  }\n\n  Add() {\n    this.router.navigate(['novo'], {relativeTo:this.route});\n  }\n\n\n\n  refresh() {\n    this.task$= this.taskService.list()\n      .pipe(\n        catchError(error => {\n          this.onErro('Erro ao carregar Tarefas.');\n          return of([])\n        })\n      );\n  }\n\n  onDelete(task: Task) {\n      this.taskService.delete(task).subscribe(data => {\n        this.tasks = this.tasks.filter( response => response !==task)\n        alert(\"task Deletado\");\n        this.refresh();\n      })\n  }\n\n  isPrazoEsgotado(prazo: Date): boolean {\n    const dataAtual = new Date();\n    return dataAtual >= prazo;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}