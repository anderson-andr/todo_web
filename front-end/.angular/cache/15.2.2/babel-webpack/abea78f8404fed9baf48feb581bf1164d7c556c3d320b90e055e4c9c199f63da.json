{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError, of } from 'rxjs';\nimport { ErrorDialogComponent } from 'src/app/shared/components/error-dialog/error-dialog.component';\nlet ProjectComponent = class ProjectComponent {\n  constructor(projetoService, router, route, dialog, app, formBuilder, snackBar) {\n    this.projetoService = projetoService;\n    this.router = router;\n    this.route = route;\n    this.dialog = dialog;\n    this.app = app;\n    this.formBuilder = formBuilder;\n    this.snackBar = snackBar;\n    this.displayedColumns = ['id', 'name', 'description', 'updatedAt', 'createdAt', 'actions'];\n    this.projetos = [];\n    {\n      this.project$ = this.projetoService.listByUser().pipe(catchError(error => {\n        this.onErro('Erro ao carregar. ');\n        return of([]);\n      }));\n    }\n  }\n  ngOnInit() {}\n  onErro(errorMsg) {\n    this.dialog.open(ErrorDialogComponent, {\n      data: errorMsg\n    });\n  }\n  Add() {\n    this.router.navigate(['novo'], {\n      relativeTo: this.route\n    });\n  }\n  onEdit(projeto) {\n    this.router.navigate(['editar', projeto.id], {\n      relativeTo: this.route\n    });\n    console.log(projeto.id);\n  }\n  refresh() {\n    this.project$ = this.projetoService.list().pipe(catchError(error => {\n      this.onErro('Erro ao carregar Projetos.');\n      return of([]);\n    }));\n  }\n  onDelete(projeto) {\n    this.projetoService.delete(projeto).subscribe(data => {\n      this.projetos = this.projetos.filter(response => response !== projeto);\n      alert(\"Projeto Deletado\");\n      this.refresh();\n    });\n  }\n};\nProjectComponent = __decorate([Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.scss']\n})], ProjectComponent);\nexport { ProjectComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAKjD,SAASC,UAAU,EAAcC,EAAE,QAAQ,MAAM;AACjD,SAASC,oBAAoB,QAAQ,+DAA+D;AAQ7F,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAI3BC,YACUC,cAA8B,EAC9BC,MAAa,EACbC,KAAqB,EACtBC,MAAiB,EACjBC,GAAiB,EAChBC,WAAwB,EACxBC,QAAqB;IANrB,mBAAc,GAAdN,cAAc;IACd,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACN,WAAM,GAANC,MAAM;IACN,QAAG,GAAHC,GAAG;IACF,gBAAW,GAAXC,WAAW;IACX,aAAQ,GAARC,QAAQ;IATlB,qBAAgB,GAAG,CAAC,IAAI,EAAC,MAAM,EAAE,aAAa,EAAC,WAAW,EAAC,WAAW,EAAC,SAAS,CAAC;IACjF,aAAQ,GAAc,EAAE;IAUtB;MACE,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACP,cAAc,CAACQ,UAAU,EAAE,CAACC,IAAI,CAEnDd,UAAU,CAAEe,KAAK,IAAG;QACjB,IAAI,CAACC,MAAM,CAAC,oBAAoB,CAAC;QAChC,OAAQf,EAAE,CAAC,EAAE,CAAC;MAClB,CAAC,CAAC,CACH;;EAML;EAEAgB,QAAQ,IAGR;EAEAD,MAAM,CAACE,QAAgB;IACrB,IAAI,CAACV,MAAM,CAACW,IAAI,CAACjB,oBAAoB,EAAE;MACrCkB,IAAI,EAAEF;KACP,CAAC;EACJ;EAIAG,GAAG;IACD,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;MAACC,UAAU,EAAC,IAAI,CAAChB;IAAK,CAAC,CAAC;EACzD;EAGAiB,MAAM,CAACC,OAAe;IACpB,IAAI,CAACnB,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,EAAEG,OAAO,CAACC,EAAE,CAAC,EAAE;MAACH,UAAU,EAAC,IAAI,CAAChB;IAAK,CAAC,CAAC;IACrEoB,OAAO,CAACC,GAAG,CAACH,OAAO,CAACC,EAAE,CAAC;EACzB;EAGAG,OAAO;IACL,IAAI,CAACjB,QAAQ,GAAE,IAAI,CAACP,cAAc,CAACyB,IAAI,EAAE,CACtChB,IAAI,CACHd,UAAU,CAACe,KAAK,IAAG;MACjB,IAAI,CAACC,MAAM,CAAC,4BAA4B,CAAC;MACzC,OAAOf,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACL;EAEA8B,QAAQ,CAACN,OAAgB;IACrB,IAAI,CAACpB,cAAc,CAAC2B,MAAM,CAACP,OAAO,CAAC,CAACQ,SAAS,CAACb,IAAI,IAAG;MACnD,IAAI,CAACc,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,MAAM,CAAEC,QAAQ,IAAIA,QAAQ,KAAIX,OAAO,CAAC;MACtEY,KAAK,CAAC,kBAAkB,CAAC;MACzB,IAAI,CAACR,OAAO,EAAE;IAChB,CAAC,CAAC;EACN;CACD;AArEY1B,gBAAgB,eAL5BJ,SAAS,CAAC;EACTuC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWrC,gBAAgB,CAqE5B;SArEYA,gBAAgB","names":["Component","catchError","of","ErrorDialogComponent","ProjectComponent","constructor","projetoService","router","route","dialog","app","formBuilder","snackBar","project$","listByUser","pipe","error","onErro","ngOnInit","errorMsg","open","data","Add","navigate","relativeTo","onEdit","projeto","id","console","log","refresh","list","onDelete","delete","subscribe","projetos","filter","response","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ander\\Documents\\Projetos\\TodoApp\\front-end\\src\\app\\project\\project\\project.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Usuario } from '../model/usuario';\nimport { UsuarioService } from '../services/usuario.service';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { catchError, Observable, of } from 'rxjs';\nimport { ErrorDialogComponent } from 'src/app/shared/components/error-dialog/error-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AppComponent } from 'src/app/app.component';\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.scss']\n})\nexport class ProjectComponent implements OnInit {\n  project$: Observable<Project[]>\n  displayedColumns = ['id','name', 'description','updatedAt','createdAt','actions'];\n  projetos: Project[] = []\n  constructor(\n    private projetoService: ProjectService,\n    private router:Router,\n    private route: ActivatedRoute,\n    public dialog: MatDialog,\n    public app :AppComponent,\n    private formBuilder: FormBuilder,\n    private snackBar: MatSnackBar,)\n  {\n    {\n      this.project$ = this.projetoService.listByUser().pipe (\n\n        catchError (error => {\n           this.onErro('Erro ao carregar. ')\n            return  of([])\n        })\n      );\n    }\n\n\n\n\n  }\n\n  ngOnInit(): void {\n\n\n  }\n\n  onErro(errorMsg: string) {\n    this.dialog.open(ErrorDialogComponent, {\n      data: errorMsg,\n    });\n  }\n\n\n\n  Add() {\n    this.router.navigate(['novo'], {relativeTo:this.route});\n  }\n\n\n  onEdit(projeto:Project) {\n    this.router.navigate(['editar', projeto.id], {relativeTo:this.route});\n    console.log(projeto.id)\n  }\n\n\n  refresh() {\n    this.project$= this.projetoService.list()\n      .pipe(\n        catchError(error => {\n          this.onErro('Erro ao carregar Projetos.');\n          return of([])\n        })\n      );\n  }\n\n  onDelete(projeto: Project) {\n      this.projetoService.delete(projeto).subscribe(data => {\n        this.projetos = this.projetos.filter( response => response !==projeto)\n        alert(\"Projeto Deletado\");\n        this.refresh();\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}